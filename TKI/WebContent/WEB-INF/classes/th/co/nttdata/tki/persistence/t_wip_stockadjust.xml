<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="t_wip_stockadjust">
	<sql id="querySql">
		FROM m_part p 
		INNER JOIN m_part_wip pw ON p.partid = pw.partid			 
	    INNER JOIN m_wip wip ON pw.wip = wip.wip
	    INNER JOIN m_fg_part fgp ON fgp.partid = p.partid
	    INNER JOIN m_fg fg ON fgp.fgid = fg.fgid
	    INNER JOIN m_fg_customer fgc ON fgc.fgid = fg.fgid 
	    INNER JOIN m_customer mc ON fgc.customerid = mc.customerid
	 	LEFT JOIN t_wip_stock w ON pw.partid = w.partid AND pw.wip = w.wip  
	 		AND (w.reportdate = #reportDate# OR w.reportdate IS NULL)
	    <dynamic prepend="WHERE"> 
			<isNotEmpty prepend="AND" property="customerId"> mc.customerid = #customerId# </isNotEmpty>
			<isNotEmpty prepend="AND" property="wip"> pw.wip = #wip# </isNotEmpty>
			<isNotEmpty prepend="AND" property="partNo"> p.partNo like '%'+ #partNo# + '%' </isNotEmpty>
			<isNotEmpty prepend="AND" property="partName"> p.partName like '%'+ #partName# + '%' </isNotEmpty>
		</dynamic>
	</sql>

	<select id="query" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust" resultClass="th.co.nttdata.tki.bean.TWipStockAdjust">
		SELECT distinct
			 pw.wip
			,wip.wipName
			,mc.customerId
			,mc.customerCode
			,p.partId
			,p.partNo
			,p.partName
			,ISNULL(w.adjuststock, ISNULL(w.currentstock,0)) as currentStock
			,ISNULL(w.reportdate, #reportDate#) as reportdate
		<include refid="querySql"/>
		ORDER BY wip.wipName, mc.customerCode, p.partNo
	</select>

	<select id="count" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust" resultClass="int">
		SELECT
			count(*)
		<include refid="querySql"/>
	</select>
	
	<insert id="insert" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust">
		<iterate property="adjustList">
			INSERT INTO t_wip_stockadjust(reportdate, wip, partid, currentstock, 
				adjuststock, adjustreason, createby, updateby) 			
			VALUES (#reportDate#, #adjustList[].wip#, #adjustList[].partId#, #adjustList[].currentStock#, 
				#adjustList[].adjustStock#, #adjustList[].adjustReason#, #createBy#, #updateBy#);
			
			MERGE INTO t_wip_stock ws 
			USING (SELECT #reportDate# as reportdate,
				    #adjustList[].wip# as wip, #adjustList[].partId# as partid, #adjustList[].adjustStock# as adjustqty) st
			ON (ws.reportdate = st.reportdate and ws.wip = st.wip and ws.partid = st.partid)
			WHEN MATCHED THEN
				UPDATE SET ws.adjuststock = st.adjustqty
			WHEN NOT MATCHED THEN
				INSERT(reportdate,wip,partid,ok,ng,pd,qty,nextwipqty,prevstock,currentstock,adjuststock)
				VALUES(st.reportdate, st.wip, st.partid, 0, 0, 0, 0, 0, 0, 0, st.adjustqty);
		</iterate>
	</insert>
	
	<!-- WIP_S04 -->
	<sql id="queryHisSql">    
		FROM t_wip_stockadjust wa INNER JOIN m_part p ON wa.partid = p.partid 
       INNER JOIN m_wip wip ON wa.wip = wip.wip   
       INNER JOIN m_part_wip pw ON p.partid = pw.partid AND wa.wip = pw.wip  
       INNER JOIN m_fg_part fgp ON fgp.partid = p.partid
	   INNER JOIN m_fg fg ON fgp.fgid = fg.fgid
	   INNER JOIN m_fg_customer fgc ON fgc.fgid = fg.fgid 
	   INNER JOIN m_customer mc ON fgc.customerid = mc.customerid
	    <dynamic prepend="WHERE">
	    	<isNotEmpty prepend="AND" property="wip"> wa.wip = #wip# </isNotEmpty>
			<isGreaterThan prepend="AND" property="customerId" compareValue="0"> fgc.customerId = #customerId# </isGreaterThan>
	   		<isNotEmpty prepend="AND" property="partNo"> p.partNo like #partNo# + '%' </isNotEmpty>
			<isNotEmpty prepend="AND" property="partName"> p.partName like #partName# + '%' </isNotEmpty>
			<isNotEmpty prepend="AND" property="reportDateFr"> CONVERT(DATE,wa.reportDate,103) <![CDATA[ >= ]]> CONVERT(DATE,#reportDateFr#,120) </isNotEmpty>
			<isNotEmpty prepend="AND" property="reportDateTo"> CONVERT(DATE,wa.reportDate,103) <![CDATA[ <= ]]> CONVERT(DATE,#reportDateTo#,120) </isNotEmpty>
			<isNotEmpty prepend="AND" property="createDateFr"> CONVERT(DATE,wa.createDate,103) <![CDATA[ >= ]]> CONVERT(DATE,#createDateFr#,120) </isNotEmpty>
			<isNotEmpty prepend="AND" property="createDateTo"> CONVERT(DATE,wa.createDate,103) <![CDATA[ <= ]]> CONVERT(DATE,#createDateTo#,120) </isNotEmpty>
	    </dynamic>  
	</sql>
	
	<select id="queryHis" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust" resultClass="th.co.nttdata.tki.bean.TWipStockAdjust">
		SELECT 
			 wip.wipName 
			,mc.customerCode 
			,p.partNo    
			,p.partName 
			,wa.reportDate
			,wa.currentStock 
			,wa.adjustStock 
			,wa.adjustReason 
			,wa.updateBy 
			,wa.lastupDate
		<include refid="queryHisSql"/>           
		ORDER by wa.lastupDate DESC, wa.wip, mc.customerCode, p.partNo 
	</select>
	
	<select id="countHis" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust" resultClass="int">
		SELECT
			count(*)
		<include refid="queryHisSql"/>
	</select>
	
	<select id="queryEnablePart" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust" resultClass="th.co.nttdata.tki.bean.TWipStockAdjust">
		SELECT distinct
			 pw.wip
			,wip.wipName
			,mc.customerId
			,mc.customerCode
			,p.partId
			,p.partNo
			,p.partName
			,ISNULL(w.adjuststock, ISNULL(w.currentstock,0)) as currentStock
			,ISNULL(w.reportdate, #reportDate#) as reportdate
		FROM m_part p 
		INNER JOIN m_part_wip pw ON p.partid = pw.partid			 
	    INNER JOIN m_wip wip ON pw.wip = wip.wip
	    INNER JOIN m_fg_part fgp ON fgp.partid = p.partid
	    INNER JOIN m_fg fg ON fgp.fgid = fg.fgid
	    INNER JOIN m_fg_customer fgc ON fgc.fgid = fg.fgid 
	    INNER JOIN m_customer mc ON fgc.customerid = mc.customerid
	 	LEFT JOIN t_wip_stock w ON pw.partid = w.partid AND pw.wip = w.wip  
	 		AND (w.reportdate = #reportDate# OR w.reportdate IS NULL)
	   WHERE p.isenable = 1
			<isNotEmpty prepend="AND" property="customerId"> mc.customerid = #customerId# </isNotEmpty>
			<isNotEmpty prepend="AND" property="wip"> pw.wip = #wip# </isNotEmpty>
			<isNotEmpty prepend="AND" property="partNo"> p.partNo like '%'+ #partNo# + '%' </isNotEmpty>
			<isNotEmpty prepend="AND" property="partName"> p.partName like '%'+ #partName# + '%' </isNotEmpty>
		ORDER BY wip.wipName, mc.customerCode, p.partNo
	</select>
	
	<select id="countEnablePart" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust" resultClass="int">
		SELECT
			count(*)
		FROM m_part p 
		INNER JOIN m_part_wip pw ON p.partid = pw.partid			 
	    INNER JOIN m_wip wip ON pw.wip = wip.wip
	    INNER JOIN m_fg_part fgp ON fgp.partid = p.partid
	    INNER JOIN m_fg fg ON fgp.fgid = fg.fgid
	    INNER JOIN m_fg_customer fgc ON fgc.fgid = fg.fgid 
	    INNER JOIN m_customer mc ON fgc.customerid = mc.customerid
	 	LEFT JOIN t_wip_stock w ON pw.partid = w.partid AND pw.wip = w.wip  
	 		AND (w.reportdate = #reportDate# OR w.reportdate IS NULL)
	    WHERE p.isenable = 1
			<isNotEmpty prepend="AND" property="customerId"> mc.customerid = #customerId# </isNotEmpty>
			<isNotEmpty prepend="AND" property="wip"> pw.wip = #wip# </isNotEmpty>
			<isNotEmpty prepend="AND" property="partNo"> p.partNo like '%'+ #partNo# + '%' </isNotEmpty>
			<isNotEmpty prepend="AND" property="partName"> p.partName like '%'+ #partName# + '%' </isNotEmpty>
	</select>
	
	<insert id="adjustWipStock" parameterClass="th.co.nttdata.tki.bean.TWipStockAdjust">
		<iterate property="adjustList">
			INSERT INTO t_wip_stockadjust(reportdate, wip, partid, currentstock, 
				adjuststock, adjustreason, createby, updateby) 			
			VALUES (#adjustList[].reportDate#, #adjustList[].wip#, #adjustList[].partId#, #adjustList[].currentStock#, 
				#adjustList[].adjustStock#, #adjustList[].adjustReason#, #createBy#, #updateBy#);
			
			MERGE INTO t_wip_stock ws 
			USING (SELECT #adjustList[].reportDate# as reportdate,
				    #adjustList[].wip# as wip, #adjustList[].partId# as partid, #adjustList[].adjustStock# as adjustqty) st
			ON (ws.reportdate = st.reportdate and ws.wip = st.wip and ws.partid = st.partid)
			WHEN MATCHED THEN
				UPDATE SET ws.adjuststock = st.adjustqty
			WHEN NOT MATCHED THEN
				INSERT(reportdate,wip,partid,ok,ng,pd,qty,nextwipqty,prevstock,currentstock,adjuststock)
				VALUES(st.reportdate, st.wip, st.partid, 0, 0, 0, 0, 0, 0, 0, st.adjustqty);
		</iterate>
	</insert>
	
</sqlMap>